import streamlit as st
import pandas as pd
import utils

df = pd.read_csv('data/telco_customer_churn_clean.csv')

st.title('Predicting Customer Churn for Subscription Service')

st.markdown("""
According to several sources ([1](https://ordwaylabs.com/resources/guides/subscription-billing-guide/#:~:text=Subscription%20billing%20is%20a%20key,processed%20through%20subscription%20billing%20platforms.)), nearly 60% of digital companies use subscription services as part of their business model.
For some of the fastest-growing companies like Netflix, Spotify, Microsoft and Google, subscription billing has been key to this expansion.
It should come as no surprise that these same companies are actively building machine learning models to predict which customers are likely to cancel their subscriptions and when.
            
With open-sourced subscription data published by sites like [Kaggle]() and [GitHub](), I have trained my own churn-prediction system based on the telecommuncations company, **Telco**, an imaginary subsidiary of IBM.
This applet allows you to predict whether generated customer profiles are likely to churn in the next month. You can select from several optimized models including the best [Ensemble Boosting]() model to make a prediction.

### How to use:
1. Edit customer profile and click on the "Generate" button to create a new customer
2. Select your choice of ML model
3. Click on the "Will they churn?" button to make a churn prediction for this customer

Note: All customer data is generated by aggregating random samples from each feature according to the distribution found in the original subscriptions dataset.
No real private customer data is used in this application or in the original dataset.
            
##### Resources:
- Subscriptions Dataset from Kaggle: 
- Code Source from GitHub: 

            
""")

st.button('Generate')

def build_a_customer():

    st.markdown("## Build a subscriber profile:")

    st.image("https://thispersondoesnotexist.com/", width=256, output_format="JPEG")

    st.markdown("### Lifetime Value (LTV):")

    tenure_range = (0, 100)
    tenure = st.slider("Months Subscribed", *tenure_range, 12)
    tenure_binned = utils.bin_value(*tenure_range, tenure)
    monthlycharges_range = (0, 50)
    monthlycharges = st.slider("Monthly Charges (in USD)", *monthlycharges_range, 25)
    monthlycharges_binned = utils.bin_value(*monthlycharges_range, monthlycharges)
    totalcharges = monthlycharges * tenure
    totalcharges_binned = "Low" # Edit later
    st.markdown(f"Total LTV:\t**${totalcharges:.2f}**")

    # Subscriber Characteristics
    st.markdown("---\n### Persona:")

    gender = st.radio('Gender', ("Male", "Female"))
    senior_citizen = st.radio('Senior Citizen', ('Yes', 'No'))
    partner = st.radio('Partner', ('Yes', 'No'))
    dependents = st.radio('Dependents', ('Yes', 'No'))

    st.markdown("---\n### Services:")
    phone_service = st.selectbox('Phone Service', ('Yes', 'No', 'No phone service'))
    multiple_lines = st.radio('Multiple Phone Lines', ('Yes', 'No'))
    internet_service_type = st.selectbox('Type of Internet Service', ('DSL', 'Fiber optic', 'No'))
    online_security = st.selectbox('Has Online Security', ('Yes', 'No', 'No internet service'))
    online_backup = st.selectbox('Has Online Backup', ('Yes', 'No', 'No internet service'))
    device_protection = st.selectbox('Device Protection', ('Yes', 'No', 'No internet service'))
    tech_support = st.selectbox('Has Technical Support', ('Yes', 'No', 'No internet service'))
    streaming_tv = st.selectbox('Has TV Streaming', ('Yes', 'No', 'No internet service'))
    streaming_movies = st.selectbox('Has Movie Streaming', ('Yes', 'No', 'No internet service'))

    st.markdown("---\n### Payment Details:")
    contract = st.selectbox('Contract Term', ('Month-to-month', 'One year', 'Two year'))
    payment_method = st.selectbox('Payment Method', (
        'Bank transfer (automatic)', 'Credit card (automatic)', 'Mailed check', 'Electronic check'))
    paperless_billing = st.radio('Has Paperless Billing', ('Yes', 'No'))

    # Create new fake user
    return pd.DataFrame({
        'gender': [gender],
        'SeniorCitizen': [1 if senior_citizen.lower() == 'yes' else 0],
        'Partner': [partner],
        'Dependents': [dependents],
        'PhoneService': [phone_service],
        'MultipleLines': [multiple_lines],
        'InternetService': [internet_service_type],
        'OnlineSecurity': [online_security],
        'OnlineBackup': [online_backup],
        'DeviceProtection': [device_protection],
        'TechSupport': [tech_support],
        'StreamingTV': [streaming_tv],
        'StreamingMovies': [streaming_movies],
        'Contract': [contract],
        'PaperlessBilling': [paperless_billing],
        'PaymentMethod': [payment_method],
        'tenure-binned': [tenure_binned],
        'MonthlyCharges-binned': [monthlycharges_binned],
        'TotalCharges-binned': [totalcharges_binned],
    })

fake_customer = build_a_customer()

churn = st.button("Will they churn?")